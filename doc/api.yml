swagger: '2.0'
info:
  description: |
    Trusted Setup participant API.
    This is a draft specification. It is subject to change without notice. 
  version: 1.0.0
  title: Trusted Setup MPC
  termsOfService: tbd
  contact:
    email: gl@abc.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: us-central1-trustedsetuptest.cloudfunctions.net
# basePath: /v2
tags:
- name: login
  description: Log in using an ethereum account
  externalDocs:
    description: Find out more
    url: http://zkparty.live/
# schemes:
# - http
paths:
  /Auth-Auth:
    post:
      tags:
      - login
      summary: Login to begin participation
      operationId: login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: includes a message signed using the Ethereum standard signing method
        required: true
        schema:
          $ref: '#/definitions/authRequest'
      responses:
        400:
          description: Invalid request. Missing parameters
        401:
          description: Eth address doesn't match message signer, or account nonce is too low
        403:
          description: Invalid HTTP method
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /participant/join:
    post:
      tags:
      - join
      summary: Join a ceremony
      description: Request to join the queue for a ceremony
      operationId: joinCeremony
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /participant/status:
    post:
      tags:
      - status
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      - application/xml
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      deprecated: true
  /contribution/start:
    post:
      tags:
      - contribute
      summary: Request prior transcript and start contribution
      description: Advises the participant's readiness to begin the computation. The server will verify 
        the participant's eligibility to start, and, if eligible, return the last valid transcript.
      operationId: constributionStart
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
  /contribution/status:
    post:
      tags:
      - contribbution status
      summary: advises contribution status
      operationId: contributionStatus
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /contribution/complete:
    post:
      tags:
      - contribution complete
      summary: Returns a completed contribution
      description: Advises that the computation has completed and returns the updated transcript
      operationId: contributionComplete
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []
  /contribution/leave:
    post:
      tags:
      - contribution 
      summary: Request to leave the queue
      description: Requests that the participant's queue position is given up. Only valid for 
         participants who have previously joiined the queue.
      operationId: contributionLeave
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []

  /ceremony/status:
    get:
      tags:
      - ceremony status
      summary: Request a summary of the cermeony status
      operationId: ceremonyStatus
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the pet
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  AuthRequest:
    type: object
    properties:
      ethAddress:
        type: string
      sig:
        type: string
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Pet:
    type: object
    required:
    - name
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /STONEBELLAU_1/TrustedSetup/1.0.0
schemes:
 - https
 - http